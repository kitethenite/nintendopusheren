---
import Card from "./Card.astro";
const data = await fetch(
  "https://thryhwcrvlzlnuucxhqk.supabase.co/rest/v1/products?limit=10",
  {
    method: "GET",
    headers: {
      apikey:
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRocnlod2Nydmx6bG51dWN4aHFrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTYyMTIxNzUsImV4cCI6MjAzMTc4ODE3NX0.qe83qKHMa9-0Tc3HFWEqgvYa_LKMiI267dutJ7DxWs0",
    },
  }
).then((res) => res.json());
// console.log(data)
---

<script>
  const initSlider = () => {
    const imageList = document.querySelector(".slider-wrapper .image-list");
    const slideButtons = document.querySelectorAll(
      ".slider-wrapper .slide-button"
    );
    const sliderScrollbar = document.querySelector(
      ".container .slider-scrollbar"
    );
    const scrollbarThumb = sliderScrollbar.querySelector(".scrollbar-thumb");
    const maxScrollLeft = imageList.scrollWidth - imageList.clientWidth;

    // Handle scrollbar thumb drag
    scrollbarThumb.addEventListener("mousedown", (e) => {
      const thumbPosition = scrollbarThumb.offsetLeft;
      const maxThumbPosition =
        sliderScrollbar.getBoundingClientRect().width -
        scrollbarThumb.offsetWidth;

      // Update thumb position on mouse move
      const handleMouseMove = (e) => {
        const newThumbPosition = thumbPosition + deltaX;
        // Ensure the scrollbar thumb stays within bounds
        const boundedPosition = Math.max(
          0,
          Math.min(maxThumbPosition, newThumbPosition)
        );
        const scrollPosition =
          (boundedPosition / maxThumbPosition) * maxScrollLeft;

        scrollbarThumb.style.left = `${boundedPosition}px`;
        imageList.scrollLeft = scrollPosition;
      };
      // Remove event listeners on mouse up
      const handleMouseUp = () => {
        document.removeEventListener("mousemove", handleMouseMove);
        document.removeEventListener("mouseup", handleMouseUp);
      };
      // Add event listeners for drag interaction
      document.addEventListener("mousemove", handleMouseMove);
      document.addEventListener("mouseup", handleMouseUp);
    });
    // Slide images according to the slide button clicks
    slideButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const direction = button.id === "prev-slide" ? -1 : 1;
        const scrollAmount = imageList.clientWidth * direction;
        imageList.scrollBy({ left: scrollAmount, behavior: "smooth" });
      });
    });
    // Show or hide slide buttons based on scroll position
    const handleSlideButtons = () => {
      slideButtons[0].style.display =
        imageList.scrollLeft <= 0 ? "none" : "flex";
      slideButtons[1].style.display =
        imageList.scrollLeft >= maxScrollLeft ? "none" : "flex";
    };
    // Update scrollbar thumb position based on image scroll
    const updateScrollThumbPosition = () => {
      const scrollPosition = imageList.scrollLeft;
      const thumbPosition =
        (scrollPosition / maxScrollLeft) *
        (sliderScrollbar.clientWidth - scrollbarThumb.offsetWidth);
      scrollbarThumb.style.left = `${thumbPosition}px`;
    };
    // Call these two functions when image list scrolls
    imageList.addEventListener("scroll", () => {
      updateScrollThumbPosition();
      handleSlideButtons();
    });
  };
  window.addEventListener("resize", initSlider);
  window.addEventListener("load", initSlider);
</script>

<h2>Lignende produkter</h2>
<section class="slider_container">
  <div class="container">
    <div class="slider-wrapper">
      <button
        id="prev-slide"
        class="slide-button material-symbols-rounded"
      >
      </button>
      <ul class="image-list">
        <section class="image-item">
          {
            data.map((data) => {
              return <Card data={data} />;
            })
          }
        </section>
      </ul>
      <button
        id="next-slide"
        class="slide-button material-symbols-rounded"
      >
      </button>
    </div>
    <div class="slider-scrollbar">
      <div class="scrollbar-track">
        <div class="scrollbar-thumb"></div>
      </div>
    </div>
  </div>
</section>

<style>
  .slider_container {
    margin: 2vw 0 2vw 0;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 50vh;
    border-top: 2px solid var(--accent-color);
    border-bottom: 2px solid var(--accent-color);
  }
  .container {
    max-width: 100%;
    width: 90%;
  }
  .slider-wrapper {
    position: relative;
  }
  .slider-wrapper .slide-button {
    position: absolute;
    top: 50%;
    outline: none;
    border: none;
    height: 50px;
    width: 50px;
    z-index: 5;
    display: flex;
    cursor: pointer;
    font-size: 2.2rem;
    background: var(--accent-color);
    color: var(--primary-color);
    border: 2px solid #404040;
    align-items: center;
    justify-content: center;
    transform: translateY(-50%);
    
  }

  .slider-wrapper .slide-button#prev-slide {
    left: -25px;
    display: none;
  }
  .slider-wrapper .slide-button#next-slide {
    right: -25px;
  }
  .slider-wrapper .image-list {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    column-gap: 58px;
    list-style: none;
    margin-bottom: 30px;
    overflow-x: auto;
    scrollbar-width: none;
  }
  .slider-wrapper .image-list::-webkit-scrollbar {
    display: none;
  }
  .slider-wrapper .image-list .image-item {
    display: flex;
    flex-direction: row;
    column-gap: 1em;
    width: 325px;
    height: 400px;
    object-fit: cover;
  }
  .container .slider-scrollbar {
    height: 24px;
    width: 100%;
    display: flex;
    align-items: center;
  }
  .slider-scrollbar .scrollbar-track {
    background: var(--secondary-accent);
    width: 100%;
    height: 5px;
    display: flex;
    align-items: center;
    border-radius: 4px;
    position: relative;
  }
  .slider-scrollbar:hover .scrollbar-track {
    height: 4px;
  }
  .slider-scrollbar .scrollbar-thumb {
    position: absolute;
    background: var(--accent-color);
    top: 0;
    bottom: 0;
    width: 50%;
    height: 100%;
    cursor: grab;
    border-radius: inherit;
  }
  .slider-scrollbar .scrollbar-thumb:active {
    cursor: grabbing;
    height: 8px;
    top: -2px;
  }
  .slider-scrollbar .scrollbar-thumb::after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    top: -10px;
    bottom: -10px;
  }
  /* Styles for mobile and tablets */
  @media only screen and (max-width: 1023px) {
    .slider-wrapper .slide-button {
      display: none !important;
    }
    .slider-wrapper .image-list {
      gap: 10px;
      margin-bottom: 15px;
      scroll-snap-type: x mandatory;
    }
    .slider-wrapper .image-list .image-item {
      width: 280px;
      height: 380px;
    }
    .slider-scrollbar .scrollbar-thumb {
      width: 20%;
    }
  }
</style>
